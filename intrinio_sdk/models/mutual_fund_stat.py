# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MutualFundStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date': 'date',
        'net_assets': 'float',
        'net_asset_value': 'float'
    }

    attribute_map = {
        'date': 'date',
        'net_assets': 'net_assets',
        'net_asset_value': 'net_asset_value'
    }

    def __init__(self, date=None, net_assets=None, net_asset_value=None):  # noqa: E501
        """MutualFundStat - a model defined in Swagger"""  # noqa: E501

        self._date = None
        self._net_assets = None
        self._net_asset_value = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if net_assets is not None:
            self.net_assets = net_assets
        if net_asset_value is not None:
            self.net_asset_value = net_asset_value

    @property
    def date(self):
        """Gets the date of this MutualFundStat.  # noqa: E501

        The calendar date that the stats collection represents  # noqa: E501

        :return: The date of this MutualFundStat.  # noqa: E501
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this MutualFundStat.

        The calendar date that the stats collection represents  # noqa: E501

        :param date: The date of this MutualFundStat.  # noqa: E501
        :type: date
        """

        self._date = date

    @property
    def net_assets(self):
        """Gets the net_assets of this MutualFundStat.  # noqa: E501

        The dollar amount of net assets managed by the fund  # noqa: E501

        :return: The net_assets of this MutualFundStat.  # noqa: E501
        :rtype: float
        """
        return self._net_assets

    @net_assets.setter
    def net_assets(self, net_assets):
        """Sets the net_assets of this MutualFundStat.

        The dollar amount of net assets managed by the fund  # noqa: E501

        :param net_assets: The net_assets of this MutualFundStat.  # noqa: E501
        :type: float
        """

        self._net_assets = net_assets

    @property
    def net_asset_value(self):
        """Gets the net_asset_value of this MutualFundStat.  # noqa: E501

        The value of the mutual fund that is reached by deducting the fund's liabilities from the market value of all of its shares and then dividing by the number of issued shares  # noqa: E501

        :return: The net_asset_value of this MutualFundStat.  # noqa: E501
        :rtype: float
        """
        return self._net_asset_value

    @net_asset_value.setter
    def net_asset_value(self, net_asset_value):
        """Sets the net_asset_value of this MutualFundStat.

        The value of the mutual fund that is reached by deducting the fund's liabilities from the market value of all of its shares and then dividing by the number of issued shares  # noqa: E501

        :param net_asset_value: The net_asset_value of this MutualFundStat.  # noqa: E501
        :type: float
        """

        self._net_asset_value = net_asset_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MutualFundStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
