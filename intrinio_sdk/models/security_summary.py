# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SecuritySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'company_id': 'str',
        'ticker': 'str',
        'composite_ticker': 'str',
        'figi': 'str',
        'name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'company_id': 'company_id',
        'ticker': 'ticker',
        'composite_ticker': 'composite_ticker',
        'figi': 'figi',
        'name': 'name'
    }

    def __init__(self, id=None, company_id=None, ticker=None, composite_ticker=None, figi=None, name=None):  # noqa: E501
        """SecuritySummary - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._company_id = None
        self._ticker = None
        self._composite_ticker = None
        self._figi = None
        self._name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if company_id is not None:
            self.company_id = company_id
        if ticker is not None:
            self.ticker = ticker
        if composite_ticker is not None:
            self.composite_ticker = composite_ticker
        if figi is not None:
            self.figi = figi
        if name is not None:
            self.name = name

    @property
    def id(self):
        """Gets the id of this SecuritySummary.  # noqa: E501

        The Intrinio ID for Security  # noqa: E501

        :return: The id of this SecuritySummary.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecuritySummary.

        The Intrinio ID for Security  # noqa: E501

        :param id: The id of this SecuritySummary.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def company_id(self):
        """Gets the company_id of this SecuritySummary.  # noqa: E501

        The Intrinio ID for the Company for which the Security is issued  # noqa: E501

        :return: The company_id of this SecuritySummary.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this SecuritySummary.

        The Intrinio ID for the Company for which the Security is issued  # noqa: E501

        :param company_id: The company_id of this SecuritySummary.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def ticker(self):
        """Gets the ticker of this SecuritySummary.  # noqa: E501

        The common/local ticker of the Security  # noqa: E501

        :return: The ticker of this SecuritySummary.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this SecuritySummary.

        The common/local ticker of the Security  # noqa: E501

        :param ticker: The ticker of this SecuritySummary.  # noqa: E501
        :type: str
        """

        self._ticker = ticker

    @property
    def composite_ticker(self):
        """Gets the composite_ticker of this SecuritySummary.  # noqa: E501

        The country-composite ticker of the Security  # noqa: E501

        :return: The composite_ticker of this SecuritySummary.  # noqa: E501
        :rtype: str
        """
        return self._composite_ticker

    @composite_ticker.setter
    def composite_ticker(self, composite_ticker):
        """Sets the composite_ticker of this SecuritySummary.

        The country-composite ticker of the Security  # noqa: E501

        :param composite_ticker: The composite_ticker of this SecuritySummary.  # noqa: E501
        :type: str
        """

        self._composite_ticker = composite_ticker

    @property
    def figi(self):
        """Gets the figi of this SecuritySummary.  # noqa: E501

        The OpenFIGI identifier  # noqa: E501

        :return: The figi of this SecuritySummary.  # noqa: E501
        :rtype: str
        """
        return self._figi

    @figi.setter
    def figi(self, figi):
        """Sets the figi of this SecuritySummary.

        The OpenFIGI identifier  # noqa: E501

        :param figi: The figi of this SecuritySummary.  # noqa: E501
        :type: str
        """

        self._figi = figi

    @property
    def name(self):
        """Gets the name of this SecuritySummary.  # noqa: E501

        The name of the Security  # noqa: E501

        :return: The name of this SecuritySummary.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecuritySummary.

        The name of the Security  # noqa: E501

        :param name: The name of this SecuritySummary.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecuritySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
