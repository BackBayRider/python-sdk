# coding: utf-8

"""
    Intrinio API

    Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.  # noqa: E501

    OpenAPI spec version: 2.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from intrinio_sdk.api_client import ApiClient


class StandardizedTagApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def filter_standardized_tags(self, **kwargs):  # noqa: E501
        """Filter Standardized Tags  # noqa: E501

        Returns Standarized Tags that match the given filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.filter_standardized_tags(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tag: Tag
        :param str type: Type
        :param str parent: ID of tag parent
        :param str statement_code: Statement Code
        :param str fs_template: Template
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[StandardizedTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.filter_standardized_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.filter_standardized_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def filter_standardized_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Filter Standardized Tags  # noqa: E501

        Returns Standarized Tags that match the given filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.filter_standardized_tags_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str tag: Tag
        :param str type: Type
        :param str parent: ID of tag parent
        :param str statement_code: Statement Code
        :param str fs_template: Template
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[StandardizedTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag', 'type', 'parent', 'statement_code', 'fs_template', 'next_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method filter_standardized_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'parent' in params:
            query_params.append(('parent', params['parent']))  # noqa: E501
        if 'statement_code' in params:
            query_params.append(('statement_code', params['statement_code']))  # noqa: E501
        if 'fs_template' in params:
            query_params.append(('fs_template', params['fs_template']))  # noqa: E501
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags/filter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StandardizedTag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_standardized_tags(self, **kwargs):  # noqa: E501
        """Get All Standardized Tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_standardized_tags(async=True)
        >>> result = thread.get()

        :param async bool
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[StandardizedTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_all_standardized_tags_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_standardized_tags_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_standardized_tags_with_http_info(self, **kwargs):  # noqa: E501
        """Get All Standardized Tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_all_standardized_tags_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[StandardizedTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_standardized_tags" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StandardizedTag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standardized_tag_by_id(self, tag_id, **kwargs):  # noqa: E501
        """Get a Standardized Tag by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_by_id(tag_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tag_id: The Intrinio ID for the tag (required)
        :return: StandardizedTag
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_standardized_tag_by_id_with_http_info(tag_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standardized_tag_by_id_with_http_info(tag_id, **kwargs)  # noqa: E501
            return data

    def get_standardized_tag_by_id_with_http_info(self, tag_id, **kwargs):  # noqa: E501
        """Get a Standardized Tag by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_by_id_with_http_info(tag_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tag_id: The Intrinio ID for the tag (required)
        :return: StandardizedTag
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tag_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standardized_tag_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tag_id' is set
        if ('tag_id' not in params or
                params['tag_id'] is None):
            raise ValueError("Missing the required parameter `tag_id` when calling `get_standardized_tag_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tag_id' in params:
            path_params['tag_id'] = params['tag_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags/{tag_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StandardizedTag',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standardized_tag_data_point_number(self, id, identifier, **kwargs):  # noqa: E501
        """Get Data Point (Number) for The Standardized Tag  # noqa: E501

        Returns a numeric data point for the Standardized Tag and entity `identifier`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_data_point_number(id, identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Intrinio Standardized Tag ID or its tag (required)
        :param str identifier: An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID) (required)
        :return: DataPointNumber
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_standardized_tag_data_point_number_with_http_info(id, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standardized_tag_data_point_number_with_http_info(id, identifier, **kwargs)  # noqa: E501
            return data

    def get_standardized_tag_data_point_number_with_http_info(self, id, identifier, **kwargs):  # noqa: E501
        """Get Data Point (Number) for The Standardized Tag  # noqa: E501

        Returns a numeric data point for the Standardized Tag and entity `identifier`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_data_point_number_with_http_info(id, identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Intrinio Standardized Tag ID or its tag (required)
        :param str identifier: An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID) (required)
        :return: DataPointNumber
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'identifier']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standardized_tag_data_point_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_standardized_tag_data_point_number`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_standardized_tag_data_point_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags/{id}/data_point/{identifier}/number', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataPointNumber',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standardized_tag_data_point_text(self, id, identifier, **kwargs):  # noqa: E501
        """Get Data Point (Text) for the Standardized Tag  # noqa: E501

        Returns a text data point for the Standardized Tag and entity `identifier`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_data_point_text(id, identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Intrinio Standardized Tag ID or its tag (required)
        :param str identifier: An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID) (required)
        :return: DataPointText
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_standardized_tag_data_point_text_with_http_info(id, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standardized_tag_data_point_text_with_http_info(id, identifier, **kwargs)  # noqa: E501
            return data

    def get_standardized_tag_data_point_text_with_http_info(self, id, identifier, **kwargs):  # noqa: E501
        """Get Data Point (Text) for the Standardized Tag  # noqa: E501

        Returns a text data point for the Standardized Tag and entity `identifier`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_data_point_text_with_http_info(id, identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Intrinio Standardized Tag ID or its tag (required)
        :param str identifier: An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID) (required)
        :return: DataPointText
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'identifier']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standardized_tag_data_point_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_standardized_tag_data_point_text`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_standardized_tag_data_point_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags/{id}/data_point/{identifier}/text', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DataPointText',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standardized_tag_historical_data(self, id, identifier, **kwargs):  # noqa: E501
        """Get Historical Data for the Standardized Tag  # noqa: E501

        Returns historical values for the Standardized Tag and the Entity represented by the given `identifier`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_historical_data(id, identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Intrinio Standardized Tag ID or its tag (required)
        :param str identifier: An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID) (required)
        :param str type: Filter by type, when applicable
        :param date start_date: Get historical data on or after this date
        :param date end_date: Get historical date on or before this date
        :param str sort_order: Sort by date `asc` or `desc`
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[HistoricalData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_standardized_tag_historical_data_with_http_info(id, identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standardized_tag_historical_data_with_http_info(id, identifier, **kwargs)  # noqa: E501
            return data

    def get_standardized_tag_historical_data_with_http_info(self, id, identifier, **kwargs):  # noqa: E501
        """Get Historical Data for the Standardized Tag  # noqa: E501

        Returns historical values for the Standardized Tag and the Entity represented by the given `identifier`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standardized_tag_historical_data_with_http_info(id, identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: The Intrinio Standardized Tag ID or its tag (required)
        :param str identifier: An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID) (required)
        :param str type: Filter by type, when applicable
        :param date start_date: Get historical data on or after this date
        :param date end_date: Get historical date on or before this date
        :param str sort_order: Sort by date `asc` or `desc`
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[HistoricalData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'identifier', 'type', 'start_date', 'end_date', 'sort_order', 'next_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standardized_tag_historical_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_standardized_tag_historical_data`")  # noqa: E501
        # verify the required parameter 'identifier' is set
        if ('identifier' not in params or
                params['identifier'] is None):
            raise ValueError("Missing the required parameter `identifier` when calling `get_standardized_tag_historical_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'identifier' in params:
            path_params['identifier'] = params['identifier']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'start_date' in params:
            query_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags/{id}/historical_data/{identifier}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[HistoricalData]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_standardized_tags(self, query, **kwargs):  # noqa: E501
        """Search Standardized Tags  # noqa: E501

        Searches for Standardized Tags matching the text `query`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_standardized_tags(query, async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: (required)
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[StandardizedTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_standardized_tags_with_http_info(query, **kwargs)  # noqa: E501
        else:
            (data) = self.search_standardized_tags_with_http_info(query, **kwargs)  # noqa: E501
            return data

    def search_standardized_tags_with_http_info(self, query, **kwargs):  # noqa: E501
        """Search Standardized Tags  # noqa: E501

        Searches for Standardized Tags matching the text `query`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_standardized_tags_with_http_info(query, async=True)
        >>> result = thread.get()

        :param async bool
        :param str query: (required)
        :param str next_page: Gets the next page of data from a previous API call
        :return: list[StandardizedTag]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'next_page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_standardized_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'query' is set
        if ('query' not in params or
                params['query'] is None):
            raise ValueError("Missing the required parameter `query` when calling `search_standardized_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'next_page' in params:
            query_params.append(('next_page', params['next_page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HttpHeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/standardized_tags/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StandardizedTag]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
